let credentials = {};
let masterCredential = {};
let studentData = {}; // ‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶æ‡¶∞‡ßç‡¶•‡ßÄ‡¶∞ ‡¶°‡ßá‡¶ü‡¶æ ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶£ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø

// ‡¶Æ‡¶æ‡¶∏‡ßç‡¶ü‡¶æ‡¶∞ ‡¶≤‡¶ó‡¶á‡¶®‡ßá‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø ‡¶≤‡ßã‡¶°
async function getCredentials() {
    try {
        const response = await fetch('masterConfig.json');
        if (!response.ok) {
            throw new Error('Failed to load config');
        }
        const data = await response.json();
        return data;
    } catch (error) {
        console.error('Error fetching config:', error);
        return null;
    }
}

async function submitMasterLogin() {
    const type = document.getElementById('loginType').value;
    const id = document.getElementById('masterId').value.trim();
    const pass = document.getElementById('masterPass').value.trim();
    const errorDiv = document.getElementById('masterLoginError');
    const successDiv = document.getElementById('masterLoginSuccess'); // success ‡¶°‡¶ø‡¶≠

    errorDiv.innerText = "";
    successDiv.innerText = "";
    successDiv.style.display = "none";

    if (!type || !id || !pass) {
        errorDiv.innerText = "Please select login type and fill ID & Password.";
        return;
    }

    const allCredentials = await getCredentials();

    if (!allCredentials) {
        errorDiv.innerText = "Unable to load login configuration.";
        return;
    }

    const user = allCredentials[type.toLowerCase()];

    if (user && id === user.id && pass === user.pass) {
        // Session ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®
        sessionStorage.setItem("userType", type.toLowerCase());
        if (type.toLowerCase() === "student") {
            sessionStorage.setItem("studentLoggedIn", "true");
        }

        // ‡¶∏‡¶´‡¶≤ ‡¶≤‡¶ó‡¶á‡¶®
        successDiv.innerText = "‚úîÔ∏è Login Successful.";
        successDiv.style.display = "block";

        setTimeout(() => {
            if (type.toLowerCase() === 'student' || type.toLowerCase() === 'school') {
                window.location.href = user.redirect;
            } else {
                // Teacher login successful ‚Äì hide the login overlay
                document.getElementById('masterLoginOverlay').style.display = "none";
                // ‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶ï ‡¶≤‡¶ó‡¶á‡¶® ‡¶∏‡¶´‡¶≤ ‡¶π‡¶≤‡ßá, ‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶ï‡ßá‡¶∞ ‡¶™‡¶∞‡ßÄ‡¶ï‡ßç‡¶∑‡¶æ‡¶∞ ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®
                loadTeacherExamLinks(); // ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶ø‡¶§ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ‡¶ï‡¶≤
            }
        }, 1000); // 1.5 ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶° ‡¶™‡¶∞ ‡¶∞‡¶ø‡¶°‡¶æ‡¶á‡¶∞‡ßá‡¶ï‡ßç‡¶ü
    } else {
        errorDiv.innerText = "Incorrect ID or Password!";
        errorDiv.style.color = "red";
    }
}

// ‚úÖ ‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶ï‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶è‡¶ï‡ßç‡¶∏‡¶æ‡¶Æ ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶≤‡ßã‡¶° (‡¶Æ‡¶æ‡¶∏‡ßç‡¶ü‡¶æ‡¶∞ ‡¶≤‡¶ó‡¶á‡¶® ‡¶∏‡¶´‡¶≤ ‡¶π‡¶≤‡ßá)
function loadTeacherExamLinks() { // ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá
    fetch('config.json') // ‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶ï‡ßá‡¶∞ ‡¶°‡ßá‡¶ü‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø config.json
        .then(response => response.json())
        .then(data => {
            credentials = data;
            renderTeacherButtonsByClass(); // ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶ø‡¶§ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ‡¶ï‡¶≤
        })
        .catch(error => console.error('Error loading config.json for teacher:', error));
}

let currentKey = ''; // ‡¶∏‡¶æ‡¶¨-‡¶≤‡¶ó‡¶á‡¶®‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶®‡ßá ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶ø‡¶§ ‡¶™‡¶∞‡ßÄ‡¶ï‡ßç‡¶∑‡¶æ‡¶∞ ‡¶ï‡ßÄ

// ‚úÖ ‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶ï‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶è‡¶ï‡ßç‡¶∏‡¶æ‡¶Æ ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶§‡ßà‡¶∞‡¶ø ‡¶ì ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã (‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶ï‡ßç‡¶≤‡¶æ‡¶∏‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ)
function renderTeacherButtonsByClass() { // ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá
    const classesOrder = ['V', 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII'];
    const exams = ['1ST', '2ND', '3RD', 'TEST', 'SEM1', 'SEM2'];

    classesOrder.forEach(cls => {
        // ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶ï‡ßç‡¶≤‡¶æ‡¶∏‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü HTML ‡¶ï‡¶®‡ßç‡¶ü‡ßá‡¶á‡¶®‡¶æ‡¶∞ ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßÅ‡¶®
        const classContainer = document.getElementById(`class-${cls}-exams`);
        if (!classContainer) {
            console.warn(`Teacher: Container for Class ${cls} not found.`);
            return;
        }

        const buttonsContainer = classContainer.querySelector('.exam-buttons-group');
        if (!buttonsContainer) {
            console.warn(`Teacher: Buttons container inside Class ${cls} not found.`);
            return;
        }
        buttonsContainer.innerHTML = ''; // ‡¶™‡ßÇ‡¶∞‡ßç‡¶¨‡ßá‡¶∞ ‡¶ï‡¶®‡ßç‡¶ü‡ßá‡¶®‡ßç‡¶ü ‡¶™‡¶∞‡¶ø‡¶∑‡ßç‡¶ï‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®

        let hasButtons = false; // ‡¶è‡¶á ‡¶ï‡ßç‡¶≤‡¶æ‡¶∏‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ï‡ßã‡¶®‡ßã ‡¶¨‡ßã‡¶§‡¶æ‡¶Æ ‡¶Ü‡¶õ‡ßá ‡¶ï‡¶ø‡¶®‡¶æ ‡¶§‡¶æ ‡¶ü‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶ï ‡¶ï‡¶∞‡¶§‡ßá

        exams.forEach(exam => {
            const key = `${cls}_${exam}`;
            if (credentials[key]) { // ‡¶Ø‡¶¶‡¶ø ‡¶è‡¶á ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶™‡¶∞‡ßÄ‡¶ï‡ßç‡¶∑‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶°‡ßá‡¶ü‡¶æ config.json-‡¶è ‡¶•‡¶æ‡¶ï‡ßá
                hasButtons = true;
                const button = document.createElement('button');
                button.className = 'box-button exam-link';

                let label = exam;
                switch (exam) {
                    case 'TEST': label = 'TEST EXAM'; break;
                    case 'SEM1': label = 'SEMESTER I'; break;
                    case 'SEM2': label = 'SEMESTER II'; break;
                    case '1ST': label = '1ST EXAM'; break;
                    case '2ND': label = '2ND EXAM'; break;
                    case '3RD': label = '3RD EXAM'; break;
                }

                button.textContent = label;
                if (credentials[key].url && credentials[key].url.trim() !== '') {
                    button.onclick = () => openLogin(key); // URL ‡¶•‡¶æ‡¶ï‡¶≤‡ßá ‡¶Ü‡¶á‡¶°‡¶ø/‡¶™‡¶æ‡¶∏‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶ö‡¶æ‡¶á‡¶¨‡ßá
                } else {
                    button.onclick = () => showAvailableSoonMessage(key); // URL ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡¶≤‡ßá ‡¶∏‡¶∞‡¶æ‡¶∏‡¶∞‡¶ø ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶¶‡ßá‡¶ñ‡¶æ‡¶¨‡ßá
                    button.classList.add('disabled-exam-link');
                }
                buttonsContainer.appendChild(button);
            }
        });

        // ‡¶Ø‡¶¶‡¶ø ‡¶è‡¶á ‡¶ï‡ßç‡¶≤‡¶æ‡¶∏‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ï‡ßã‡¶®‡ßã ‡¶¨‡ßã‡¶§‡¶æ‡¶Æ ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡ßá, ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶ï‡ßç‡¶≤‡¶æ‡¶∏ ‡¶ï‡¶®‡ßç‡¶ü‡ßá‡¶á‡¶®‡¶æ‡¶∞‡¶ü‡¶ø ‡¶≤‡ßÅ‡¶ï‡¶æ‡¶®
        if (!hasButtons) {
            classContainer.style.display = 'none';
        } else {
            classContainer.style.display = 'block'; // ‡¶¨‡ßã‡¶§‡¶æ‡¶Æ ‡¶•‡¶æ‡¶ï‡¶≤‡ßá ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®
        }
    });
}


// ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶è‡¶ï‡ßç‡¶∏‡¶æ‡¶Æ ‡¶≤‡¶ø‡¶Ç‡¶ï‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶∏‡¶æ‡¶¨-‡¶≤‡¶ó‡¶á‡¶®
function openLogin(key) {
    currentKey = key;
    document.getElementById('loginId').value = '';
    document.getElementById('loginPassword').value = '';
    document.getElementById('loginError').innerText = '';
    document.getElementById('loginDialog').showModal();
}

// ‡¶∏‡¶æ‡¶¨-‡¶≤‡¶ó‡¶á‡¶® ‡¶¨‡¶®‡ßç‡¶ß
function closeLogin() {
    document.getElementById('loginDialog').close();
}

// ‡¶∏‡¶æ‡¶¨-‡¶≤‡¶ó‡¶á‡¶® ‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á ‡¶ï‡¶∞‡ßá ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶ñ‡ßã‡¶≤‡¶æ
function submitLogin() {
    const id = document.getElementById('loginId').value;
    const pass = document.getElementById('loginPassword').value;
    const credential = credentials[currentKey]; // ‡¶è‡¶ü‡¶ø teacher ‡¶¨‡¶æ student data ‡¶è‡¶∞ ‡¶â‡¶™‡¶∞ ‡¶®‡¶ø‡¶∞‡ßç‡¶≠‡¶∞ ‡¶ï‡¶∞‡¶¨‡ßá

    // Determine which data source to use based on currentKey's format or a global state
    // For simplicity, let's assume if currentKey is set by renderTeacherButtonsByClass, use credentials.
    // If it's for student (which this login is not for directly now), it would be studentData.
    // The previous design had one login dialog for both teacher sub-links and student results, which is a bit ambiguous.
    // For teacher_dates.js's purpose, this is fine.
    if (credential && credential.id === id && credential.pass === pass) {
        if (credential.url && credential.url.trim() !== '') {
            window.open(credential.url, '_blank');
            closeLogin();
        } else {
            closeLogin();
            showAvailableSoonMessage(currentKey);
        }
    } else {
        document.getElementById('loginError').innerText = 'Incorrect ID or Password!';
    }
}

// "‡¶∂‡ßÄ‡¶ò‡ßç‡¶∞‡¶á ‡¶â‡¶™‡¶≤‡¶¨‡ßç‡¶ß ‡¶π‡¶¨‡ßá" ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® (‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶ï ‡¶ì ‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶æ‡¶∞‡ßç‡¶•‡ßÄ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø)
function showAvailableSoonMessage(key) {
    // ‡¶ï‡ßã‡¶® ‡¶ï‡ßç‡¶≤‡¶æ‡¶∏‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶¶‡ßá‡¶ñ‡¶æ‡¶§‡ßá ‡¶π‡¶¨‡ßá ‡¶§‡¶æ ‡¶®‡¶ø‡¶∞‡ßç‡¶ß‡¶æ‡¶∞‡¶£ ‡¶ï‡¶∞‡ßÅ‡¶®
    const cls = key.split('_')[0];
    // ‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶ï ‡¶¨‡¶æ ‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶æ‡¶∞‡ßç‡¶•‡ßÄ‡¶∞ ‡¶≤‡¶ø‡¶Ç‡¶ï‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶∏‡¶†‡¶ø‡¶ï ‡¶ï‡¶®‡ßç‡¶ü‡ßá‡¶á‡¶®‡¶æ‡¶∞ ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßÅ‡¶®
    // ‡¶è‡¶á ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®‡¶ü‡¶ø ‡¶è‡¶ñ‡¶® ‡¶ï‡ßç‡¶≤‡¶æ‡¶∏‡ßá‡¶∞ ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶ï‡¶®‡ßç‡¶ü‡ßá‡¶á‡¶®‡¶æ‡¶∞‡ßá‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶¨‡ßá
    const specificClassContainer = document.getElementById(`class-${cls}-exams`);
    if (!specificClassContainer) {
        console.warn(`Container for class ${cls} not found for showing message.`);
        return;
    }

    const links = specificClassContainer.getElementsByClassName('exam-link');

    for (let link of links) {
        if (link.textContent === getExamText(key)) {
            const next = link.nextElementSibling;
            if (next && next.classList.contains('avail-msg')) next.remove();

            const msg = document.createElement('div');
            msg.className = 'avail-msg';
            msg.textContent = 'üîî Available Soon üîî';

            link.parentNode.insertBefore(msg, link.nextSibling);

            setTimeout(() => {
                msg.remove();
            }, 3000);

            break;
        }
    }
}

// ‡¶™‡¶∞‡ßÄ‡¶ï‡ßç‡¶∑‡¶æ‡¶∞ ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶´‡ßá‡¶∞‡¶§ ‡¶¶‡ßá‡¶Ø‡¶º ('TEST EXAM', 'SEMESTER I', ...)
function getExamText(key) {
    const parts = key.split('_');
    const exam = parts[1];

    switch (exam) {
        case 'TEST': return 'TEST EXAM';
        case 'SEM1': return 'SEMESTER I';
        case 'SEM2': return 'SEMESTER II';
        case '1ST': return '1ST EXAM';
        case '2ND': return '2ND EXAM';
        case '3RD': return '3RD EXAM';
        default: return exam; // fallback
    }
}

// ‚úÖ ‡¶∏‡ßç‡¶ü‡ßÅ‡¶°‡ßá‡¶®‡ßç‡¶ü ‡¶è‡¶ï‡ßç‡¶∏‡¶æ‡¶Æ ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï (‡¶™‡¶∞‡ßÄ‡¶ï‡ßç‡¶∑‡¶æ‡¶∞ ‡¶´‡¶≤‡¶æ‡¶´‡¶≤) - ‡¶ï‡ßç‡¶≤‡¶æ‡¶∏ ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡¶Ø‡¶º‡ßÄ ‡¶∞‡ßá‡¶®‡ßç‡¶°‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ
function loadStudentExamLinks() {
    fetch('config_student.json')
        .then(response => {
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            return response.json();
        })
        .then(data => {
            studentData = data;
            renderStudentButtonsByClass(); // ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶ø‡¶§ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ‡¶ï‡¶≤
        })
        .catch(error => {
            console.error('‡¶ï‡¶®‡¶´‡¶ø‡¶ó‡¶æ‡¶∞‡ßá‡¶∂‡¶® ‡¶≤‡ßã‡¶°‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ (‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶æ‡¶∞‡ßç‡¶•‡ßÄ):', error);
            // ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶ó‡ßç‡¶≤‡ßã‡¶¨‡¶æ‡¶≤ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã ‡¶Ø‡ßá‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá ‡¶Ø‡¶¶‡¶ø ‡¶ï‡ßã‡¶®‡ßã ‡¶ï‡ßç‡¶≤‡¶æ‡¶∏-‡¶≠‡¶ø‡¶§‡ßç‡¶§‡¶ø‡¶ï ‡¶ï‡¶®‡ßç‡¶ü‡ßá‡¶á‡¶®‡¶æ‡¶∞‡ßá ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶®‡¶æ ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã ‡¶π‡¶Ø‡¶º
        });
}

// ‚úÖ ‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶æ‡¶∞‡ßç‡¶•‡ßÄ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶¨‡¶æ‡¶ü‡¶® ‡¶§‡ßà‡¶∞‡¶ø ‡¶ì ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã (‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶ï‡ßç‡¶≤‡¶æ‡¶∏‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ)
function renderStudentButtonsByClass() { // ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá
    const classesOrder = ['V', 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII']; // ‡¶ï‡ßç‡¶≤‡¶æ‡¶∏‡ßá‡¶∞ ‡¶ï‡ßç‡¶∞‡¶Æ

    classesOrder.forEach(cls => {
        // ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶ï‡ßç‡¶≤‡¶æ‡¶∏‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü HTML ‡¶ï‡¶®‡ßç‡¶ü‡ßá‡¶á‡¶®‡¶æ‡¶∞ ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßÅ‡¶®
        const classContainer = document.getElementById(`class-${cls}-exams`);
        if (!classContainer) {
            console.warn(`Student: Container for Class ${cls} not found.`);
            return;
        }

        const buttonsContainer = classContainer.querySelector('.exam-buttons-group');
        if (!buttonsContainer) {
            console.warn(`Student: Buttons container inside Class ${cls} not found.`);
            return;
        }
        buttonsContainer.innerHTML = ''; // ‡¶™‡ßÇ‡¶∞‡ßç‡¶¨‡ßá‡¶∞ ‡¶ï‡¶®‡ßç‡¶ü‡ßá‡¶®‡ßç‡¶ü ‡¶™‡¶∞‡¶ø‡¶∑‡ßç‡¶ï‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶≤‡ßã

        const exams = ['1ST', '2ND', '3RD', 'TEST', 'SEM1', 'SEM2'];
        let hasButtons = false; // ‡¶è‡¶á ‡¶ï‡ßç‡¶≤‡¶æ‡¶∏‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ï‡ßã‡¶®‡ßã ‡¶¨‡ßã‡¶§‡¶æ‡¶Æ ‡¶Ü‡¶õ‡ßá ‡¶ï‡¶ø‡¶®‡¶æ ‡¶§‡¶æ ‡¶ü‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶ï ‡¶ï‡¶∞‡¶§‡ßá

        exams.forEach(exam => {
            const key = `${cls}_${exam}`;
            if (studentData[key]) {
                hasButtons = true;
                const link = studentData[key].url;
                const a = document.createElement('a');
                a.className = 'box-button exam-link';
                a.target = '_blank';

                let label = exam;
                if (exam === 'TEST') label = 'TEST EXAM';
                else if (exam === 'SEM1') label = 'SEMESTER I';
                else if (exam === 'SEM2') label = 'SEMESTER II';
                else if (exam === '1ST') label = '1ST EXAM';
                else if (exam === '2ND') label = '2ND EXAM';
                else if (exam === '3RD') label = '3RD EXAM';
                a.textContent = label;

                if (link && link.trim() !== '') {
                    a.href = link;
                } else {
                    a.href = '#';
                    a.onclick = (e) => {
                        e.preventDefault();
                        const oldMsg = a.nextElementSibling;
                        if (oldMsg && oldMsg.classList.contains('avail-msg')) {
                            oldMsg.remove();
                        }
                        const msg = document.createElement('div');
                        msg.className = 'avail-msg';
                        msg.textContent = 'üîî ‡¶∂‡ßÄ‡¶ò‡ßç‡¶∞‡¶á ‡¶â‡¶™‡¶≤‡¶¨‡ßç‡¶ß ‡¶π‡¶¨‡ßá üîî';
                        a.parentNode.insertBefore(msg, a.nextSibling);
                        setTimeout(() => {
                            msg.remove();
                        }, 3000);
                    };
                    a.classList.add('disabled-exam-link'); // ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡¶≤‡ßá ‡¶®‡¶ø‡¶∑‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º ‡¶ï‡ßç‡¶≤‡¶æ‡¶∏ ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®
                }
                buttonsContainer.appendChild(a);
            }
        });

        // ‡¶Ø‡¶¶‡¶ø ‡¶è‡¶á ‡¶ï‡ßç‡¶≤‡¶æ‡¶∏‡ßá‡¶∞ ‡¶ï‡ßã‡¶®‡ßã ‡¶¨‡¶æ‡¶ü‡¶® ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡ßá, ‡¶§‡¶¨‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶¨‡¶æ‡¶∞‡ßç‡¶§‡¶æ ‡¶¶‡¶ø‡¶® ‡¶¨‡¶æ ‡¶ï‡¶®‡ßç‡¶ü‡ßá‡¶á‡¶®‡¶æ‡¶∞ ‡¶≤‡ßÅ‡¶ï‡¶æ‡¶®
        if (!hasButtons) {
            // ‡¶Ø‡¶¶‡¶ø ‡¶Ü‡¶™‡¶®‡¶ø ‡¶ï‡ßç‡¶≤‡¶æ‡¶∏‡ßá‡¶∞ ‡¶ï‡¶®‡ßç‡¶ü‡ßá‡¶á‡¶®‡¶æ‡¶∞ ‡¶≤‡ßÅ‡¶ï‡¶æ‡¶§‡ßá ‡¶ö‡¶æ‡¶®:
            classContainer.style.display = 'none';
            // ‡¶Ö‡¶•‡¶¨‡¶æ ‡¶Ø‡¶¶‡¶ø ‡¶Ü‡¶™‡¶®‡¶ø "‡¶ï‡ßã‡¶®‡ßã ‡¶™‡¶∞‡ßÄ‡¶ï‡ßç‡¶∑‡¶æ‡¶∞ ‡¶´‡¶≤‡¶æ‡¶´‡¶≤ ‡¶â‡¶™‡¶≤‡¶¨‡ßç‡¶ß ‡¶®‡ßá‡¶á" ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶¶‡ßá‡¶ñ‡¶æ‡¶§‡ßá ‡¶ö‡¶æ‡¶®:
            // const noExamsMsg = document.createElement('p');
            // noExamsMsg.textContent = '‡¶è‡¶á ‡¶ï‡ßç‡¶≤‡¶æ‡¶∏‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ï‡ßã‡¶®‡ßã ‡¶™‡¶∞‡ßÄ‡¶ï‡ßç‡¶∑‡¶æ‡¶∞ ‡¶´‡¶≤‡¶æ‡¶´‡¶≤ ‡¶â‡¶™‡¶≤‡¶¨‡ßç‡¶ß ‡¶®‡ßá‡¶á‡•§';
            // noExamsMsg.style.cssText = 'font-size: 0.9em; color: #777; margin-top: 15px; text-align: center;';
            // classContainer.appendChild(noExamsMsg);
        } else {
            classContainer.style.display = 'block'; // ‡¶¨‡ßã‡¶§‡¶æ‡¶Æ ‡¶•‡¶æ‡¶ï‡¶≤‡ßá ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®
            // ‡¶Ø‡¶¶‡¶ø `boxHeading` ‡¶è‡¶¨‡¶Ç `buttonsContainer` ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡ßá, ‡¶§‡¶¨‡ßá ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡ßÅ‡¶® (‡¶Ø‡¶¶‡¶ø ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ HTML ‡¶è ‡¶™‡ßÇ‡¶∞‡ßç‡¶¨‡ßá ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡ßá)
            // ‡¶è‡¶ü‡¶ø ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ø‡ßá `classBox` ‡¶è‡¶∞ ‡¶≠‡¶ø‡¶§‡¶∞‡ßá ‡¶π‡ßá‡¶°‡¶ø‡¶Ç ‡¶è‡¶¨‡¶Ç ‡¶¨‡ßã‡¶§‡¶æ‡¶Æ ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶Ü‡¶õ‡ßá
            if (!classContainer.querySelector('.box-heading')) {
                 const boxHeading = document.createElement('h2'); // h2 ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶≤‡ßã
                 boxHeading.className = 'box-heading shine';
                 boxHeading.textContent = `CLASS ${cls} EXAMS`; // HTML ‡¶è h2 ‡¶∞‡¶Ø‡¶º‡ßá‡¶õ‡ßá
                 classContainer.prepend(boxHeading); // ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®
            }
            if (!classContainer.querySelector('.exam-buttons-group')) {
                classContainer.appendChild(buttonsContainer);
            }
        }
    });
}


// NOTICE & HELP ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ (‡¶Ö‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶ø‡¶§)
fetch('files.json')
    .then(response => response.json())
    .then(data => {
        populateList('notice-list', data.notices);
        populateList('help-list', data.help);
    })
    .catch(error => console.error('Error fetching files.json:', error)); // ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶ø‡¶Ç ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá

function populateList(elementId, items) {
    const ul = document.getElementById(elementId);
    if (!ul) { // ul ‡¶è‡¶≤‡¶ø‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡¶≤‡ßá ‡¶´‡ßá‡¶∞‡¶§ ‡¶Ø‡¶æ‡¶®
        console.warn(`Element with ID ${elementId} not found.`);
        return;
    }
    ul.innerHTML = ''; // ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ ‡¶™‡¶∞‡¶ø‡¶∑‡ßç‡¶ï‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®
    items.forEach(item => {
        const li = document.createElement('li');
        const a = document.createElement('a');
        a.href = item.url;
        a.textContent = `${item.name} (${item.date})`;
        a.target = '_blank';
        li.appendChild(a);
        ul.appendChild(li);
    });
}

// ‡¶ì‡¶Ø‡¶º‡ßá‡¶≤‡¶ï‡¶æ‡¶Æ ‡¶™‡¶™ ‡¶Ü‡¶™‡ßá‡¶∞ ‡¶ú‡¶æ‡¶≠‡¶æ‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡ßç‡¶ü ‡¶ï‡ßã‡¶° (‡¶Ö‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶ø‡¶§)
document.addEventListener('DOMContentLoaded', function() {
    // JSON ‡¶´‡¶æ‡¶á‡¶≤ ‡¶•‡ßá‡¶ï‡ßá ‡¶°‡ßá‡¶ü‡¶æ ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®
    fetch('home_popup.json')
        .then(response => {
            if (!response.ok) {
                throw new Error('‡¶®‡ßá‡¶ü‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶ï ‡¶∞‡ßá‡¶∏‡¶™‡¶®‡ßç‡¶∏ ‡¶†‡¶ø‡¶ï ‡¶õ‡¶ø‡¶≤ ‡¶®‡¶æ ' + response.statusText);
            }
            return response.json();
        })
        .then(data => {
            const popupTitleElement = document.getElementById('popupTitle');
            const popupMessageElement = document.getElementById('popupMessage');
            const downloadButton = document.getElementById('downloadPopupButton');
            const closeButton = document.getElementById('closePopupButton');
            const welcomePopup = document.getElementById('websiteWelcomePopup');

            if (popupTitleElement && data.popup_title) {
                popupTitleElement.textContent = data.popup_title;
            }

            if (popupMessageElement && Array.isArray(data.popup_message)) {
                popupMessageElement.innerHTML = '';
                data.popup_message.forEach(paragraphText => {
                    const p = document.createElement('p');
                    p.textContent = paragraphText;
                    popupMessageElement.appendChild(p);
                });
            } else if (popupMessageElement && typeof data.popup_message === 'string') {
                popupMessageElement.innerHTML = data.popup_message;
            }

            if (welcomePopup) {
                welcomePopup.style.display = 'flex';
            }

            if (closeButton) {
                closeButton.addEventListener('click', closeWebsiteWelcomePopup);
            }

            if (downloadButton) {
                downloadButton.addEventListener('click', () => {
                    if (welcomePopup) {
                        downloadPopupAsJpg(welcomePopup);
                    }
                });
            }
        })
        .catch(error => {
            console.error('‡¶™‡¶™-‡¶Ü‡¶™ ‡¶°‡ßá‡¶ü‡¶æ ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá:', error);
        });
});

function closeWebsiteWelcomePopup() {
    const welcomePopup = document.getElementById('websiteWelcomePopup');
    if (welcomePopup) {
        welcomePopup.style.display = 'none';
    }
}

// downloadPopupAsJpg ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®‡¶ü‡¶ø ‡¶Ö‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶ø‡¶§ ‡¶•‡¶æ‡¶ï‡¶¨‡ßá
async function downloadPopupAsJpg(popupElement) {
    try {
        // html2canvas ‡¶≤‡¶æ‡¶á‡¶¨‡ßç‡¶∞‡ßá‡¶∞‡¶ø ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ ‡¶Ü‡¶õ‡ßá ‡¶ß‡¶∞‡ßá ‡¶®‡ßá‡¶ì‡¶Ø‡¶º‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá
        const canvas = await html2canvas(popupElement);
        const dataURL = canvas.toDataURL('image/jpeg');

        const a = document.createElement('a');
        a.href = dataURL;
        a.download = 'popup_message.jpg';
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);

        closeWebsiteWelcomePopup();

    } catch (error) {
        console.error('‡¶™‡¶™-‡¶Ü‡¶™ ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ:', error);
    }
}

// ‡¶™‡ßá‡¶ú ‡¶≤‡ßã‡¶° ‡¶π‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶∏‡¶æ‡¶•‡ßá ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®‡¶ü‡¶ø ‡¶ï‡¶≤ ‡¶ï‡¶∞‡ßÅ‡¶®
// ‡¶è‡¶á ‡¶Ö‡¶Ç‡¶∂‡¶ü‡¶ø ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶ï‡¶∞‡¶¨‡ßá ‡¶Ø‡ßá ‡¶∏‡¶†‡¶ø‡¶ï ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®‡¶ü‡¶ø ‡¶ï‡¶≤ ‡¶π‡¶ö‡ßç‡¶õ‡ßá ‡¶≤‡¶ó‡¶á‡¶® ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏‡ßá‡¶∞ ‡¶â‡¶™‡¶∞ ‡¶≠‡¶ø‡¶§‡ßç‡¶§‡¶ø ‡¶ï‡¶∞‡ßá
document.addEventListener('DOMContentLoaded', () => {
    const userType = sessionStorage.getItem("userType");

    // ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∂‡¶∞‡ßç‡¶§ ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá ‡¶Ø‡¶æ‡¶§‡ßá ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶ü‡¶ø‡¶ö‡¶æ‡¶∞ ‡¶≤‡¶ó‡¶á‡¶® ‡¶ï‡¶∞‡¶≤‡ßá ‡¶ü‡¶ø‡¶ö‡¶æ‡¶∞ ‡¶≤‡¶ø‡¶Ç‡¶ï‡¶ó‡ßÅ‡¶≤‡ßã ‡¶≤‡ßã‡¶° ‡¶π‡¶Ø‡¶º,
    // ‡¶è‡¶¨‡¶Ç ‡¶∏‡ßç‡¶ü‡ßÅ‡¶°‡ßá‡¶®‡ßç‡¶ü ‡¶≤‡¶ó‡¶á‡¶® ‡¶ï‡¶∞‡¶≤‡ßá ‡¶∏‡ßç‡¶ü‡ßÅ‡¶°‡ßá‡¶®‡ßç‡¶ü ‡¶≤‡¶ø‡¶Ç‡¶ï‡¶ó‡ßÅ‡¶≤‡ßã ‡¶≤‡ßã‡¶° ‡¶π‡¶Ø‡¶º‡•§
    // ‡¶Ø‡¶¶‡¶ø ‡¶ï‡ßá‡¶â ‡¶≤‡¶ó‡¶á‡¶® ‡¶®‡¶æ ‡¶ï‡¶∞‡ßá, ‡¶§‡¶¨‡ßá ‡¶Æ‡¶æ‡¶∏‡ßç‡¶ü‡¶æ‡¶∞ ‡¶≤‡¶ó‡¶á‡¶® ‡¶ì‡¶≠‡¶æ‡¶∞‡¶≤‡ßá ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã ‡¶â‡¶ö‡¶ø‡¶§‡•§
    if (userType === 'teacher') {
        document.getElementById('masterLoginOverlay').style.display = "none"; // ‡¶≤‡¶ó‡¶á‡¶® ‡¶ì‡¶≠‡¶æ‡¶∞‡¶≤‡ßá ‡¶≤‡ßÅ‡¶ï‡¶æ‡¶®
        loadTeacherExamLinks(); // ‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶ï‡ßá‡¶∞ ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®
    } else if (userType === 'student') {
        document.getElementById('masterLoginOverlay').style.display = "none"; // ‡¶≤‡¶ó‡¶á‡¶® ‡¶ì‡¶≠‡¶æ‡¶∞‡¶≤‡ßá ‡¶≤‡ßÅ‡¶ï‡¶æ‡¶®
        loadStudentExamLinks(); // ‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶æ‡¶∞‡ßç‡¶•‡ßÄ‡¶∞ ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®
    } else {
        // ‡¶ï‡ßã‡¶®‡ßã ‡¶≤‡¶ó‡¶á‡¶® ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡¶≤‡ßá, ‡¶Æ‡¶æ‡¶∏‡ßç‡¶ü‡¶æ‡¶∞ ‡¶≤‡¶ó‡¶á‡¶® ‡¶ì‡¶≠‡¶æ‡¶∞‡¶≤‡ßá ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®
        document.getElementById('masterLoginOverlay').style.display = "flex";
    }
});

// ‚úÖ ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶Ü‡¶™‡¶≤‡ßã‡¶°‡ßá‡¶∞ ‡¶∂‡ßá‡¶∑ ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ, ‡¶ö‡¶≤‡¶Æ‡¶æ‡¶® ‡¶®‡ßã‡¶ü‡ßÄ‡¶∂ ‡¶ü‡¶ø‡¶ö‡¶æ‡¶∞‡¶¶‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø....
        // ‡¶∏‡¶Ç‡¶∂‡ßã‡¶ß‡¶ø‡¶§ ID ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá
        const examDatesMarquee = document.getElementById("exam-dates-marquee-content");

        // Exam dates ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡¶æ
        examDates.forEach(exam => {
            if (exam.date) {
                const span = document.createElement("span");
                span.textContent = `${exam.text} ${exam.date}, `;

                // ‡¶∞‡¶Ç ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ó ‡¶™‡ßÅ‡¶∞‡ßã ‡¶≤‡¶æ‡¶á‡¶®‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
                span.style.color = exam.color;
                span.style.fontWeight = "bold";

                if (exam.backgroundColor) {
                    span.style.backgroundColor = exam.backgroundColor;
                }

                examDatesMarquee.appendChild(span);
            }
        });

        // Mouse hover ‡¶ï‡¶∞‡¶≤‡ßá ‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶≤ ‡¶•‡¶æ‡¶Æ‡¶æ‡¶®‡ßã
        examDatesMarquee.addEventListener("mouseover", () => {
            examDatesMarquee.classList.add("paused");
        });
        examDatesMarquee.addEventListener("mouseout", () => {
            examDatesMarquee.classList.remove("paused");
        });

        // ‡¶Æ‡ßã‡¶¨‡¶æ‡¶á‡¶≤‡ßá touch ‡¶ï‡¶∞‡¶≤‡ßá ‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶≤ ‡¶•‡¶æ‡¶Æ‡¶æ‡¶®‡ßã
        examDatesMarquee.addEventListener("touchstart", () => {
            examDatesMarquee.classList.add("paused");
        });
        examDatesMarquee.addEventListener("touchend", () => {
            examDatesMarquee.classList.remove("paused");
        });
    
